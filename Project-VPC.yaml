AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template for creating VPC"
Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Enter the IP range for this VPC
    Type: String
  PublicSubnetACIDR:
    Default: 10.0.0.0/24
    Description: Enter the IP range for the public subnet A
    Type: String
  PublicSubnetBCIDR:
    Default: 10.0.1.0/24
    Description: Enter the IP range for the public subnet B
    Type: String
  PrivateSubnetACIDR:
    Default: 10.0.2.0/24
    Description: Enter the IP range for the private subnet A
    Type: String
  PrivateSubnetBCIDR:
    Default: 10.0.3.0/24
    Description: Enter the IP range for the private subnet B
    Type: String

Resources:
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: kiprop-VPC
# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Project IGW
# Internet Gateway Attachment to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
# Create Public Subnet A
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetACIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet A
      VpcId: !Ref VPC
# create Public Subnet B
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetBCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet B
      VpcId: !Ref VPC
# Create Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref VPC
# Add route to the public route table
  PublicRoute:
    Type: AWS::EC2::Route
    #DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
# Public subnet A association with the public route table
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
# Public subnet B association with the public route table
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
# Create Private Subnet A
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetACIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet A
      VpcId: !Ref VPC
# Create Private Subnet B
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetBCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet B
      VpcId: !Ref VPC
# Create ALB Security group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB-SG
#Create Security Group for the project Web Server
  ProjectWebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: ASG-SG
      VpcId: !Ref VPC


  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to RDS Database
      Tags:
        - Key: Name
          Value: Data-SG
      VpcId: !Ref VPC

  DatabaseSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: tcp
      FromPort: '3306'
      ToPort: '3306'
      SourceSecurityGroupId: !Ref ProjectWebServerSecurityGroup

Outputs:
# Export VPC ID
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

# Export Public Subnet A
  PublicSubnetA:
    Description: Public Subnet A ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA
    Value: !Ref PublicSubnetA

# Export Public Subnet B
  PublicSubnetB:
    Description: Public Subnet B ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB
    Value: !Ref PublicSubnetB

# Export Private Subnet A
  PrivateSubnetA:
    Description: Private Subnet A ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA
    Value: !Ref PrivateSubnetA

# Export Private Subnet B
  PrivateSubnetB:
    Description: Private Subnet B ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetB
    Value: !Ref PrivateSubnetB
# Export ALB Security Group ID
  ALBSecurityGroup:
    Description: Application Load Balancer Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
    Value: !Ref ALBSecurityGroup
# Export WebServer Security Group ID
  ProjectWebServerSecurityGroup:
    Description: Webserver Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-ProjectWebServerSecurityGroup
    Value: !Ref ProjectWebServerSecurityGroup

# Export DataBase Security Group ID
  DatabaseSecurityGroup:
    Description: Database Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSecurityGroup
    Value: !Ref DatabaseSecurityGroup


